# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_pb2 as common__pb2
import fservice_pb2 as fservice__pb2


class MessagePassingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SimulationStart = channel.unary_unary(
                '/TechnionFormulaAV.Messages.MessagePassing/SimulationStart',
                request_serializer=fservice__pb2.SimulationStartRequest.SerializeToString,
                response_deserializer=fservice__pb2.MessageAck.FromString,
                )
        self.SimulationEnd = channel.unary_unary(
                '/TechnionFormulaAV.Messages.MessagePassing/SimulationEnd',
                request_serializer=fservice__pb2.NotifySimulationEnd.SerializeToString,
                response_deserializer=fservice__pb2.MessageAck.FromString,
                )
        self.GetMessage = channel.unary_unary(
                '/TechnionFormulaAV.Messages.MessagePassing/GetMessage',
                request_serializer=common__pb2.Message.SerializeToString,
                response_deserializer=fservice__pb2.MessageAck.FromString,
                )


class MessagePassingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SimulationStart(self, request, context):
        """SimulationStart

        Unary RPC, the server gets a simulation request with an ID from the client.
        The server starts the simulation, and sends a flag to the client notifing whether the simulation started
        succesfully or not.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SimulationEnd(self, request, context):
        """SimulationEnd

        Unary RPC, the server gets a simulation end notifiaction with an ID from the client.
        The server ends the simulation, and sends a flag to the client notifing whether the simulation ended
        succesfully or not.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessagePassingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SimulationStart': grpc.unary_unary_rpc_method_handler(
                    servicer.SimulationStart,
                    request_deserializer=fservice__pb2.SimulationStartRequest.FromString,
                    response_serializer=fservice__pb2.MessageAck.SerializeToString,
            ),
            'SimulationEnd': grpc.unary_unary_rpc_method_handler(
                    servicer.SimulationEnd,
                    request_deserializer=fservice__pb2.NotifySimulationEnd.FromString,
                    response_serializer=fservice__pb2.MessageAck.SerializeToString,
            ),
            'GetMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMessage,
                    request_deserializer=common__pb2.Message.FromString,
                    response_serializer=fservice__pb2.MessageAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TechnionFormulaAV.Messages.MessagePassing', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessagePassing(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SimulationStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TechnionFormulaAV.Messages.MessagePassing/SimulationStart',
            fservice__pb2.SimulationStartRequest.SerializeToString,
            fservice__pb2.MessageAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SimulationEnd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TechnionFormulaAV.Messages.MessagePassing/SimulationEnd',
            fservice__pb2.NotifySimulationEnd.SerializeToString,
            fservice__pb2.MessageAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TechnionFormulaAV.Messages.MessagePassing/GetMessage',
            common__pb2.Message.SerializeToString,
            fservice__pb2.MessageAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
